webpackHotUpdate(0,{

/***/ 25:
/***/ function(module, exports, __webpack_require__) {

	eval("//$q, $interval, $window, config, utils\n\nvar utils = __webpack_require__(18);\nvar extend = utils.extend;\nvar forEach = utils.forEach;\n\nfunction Popup() {\n\n  var Popup = {};\n\n  Popup.url = '';\n  Popup.popupWindow = null;\n\n  Popup.open = function (url, name, options) {\n    Popup.url = url;\n\n    var stringifiedOptions = Popup.stringifyOptions(Popup.prepareOptions(options));\n    var UA = window.navigator.userAgent;\n    var windowName = window.cordova || UA.indexOf('CriOS') > -1 ? '_blank' : name;\n\n    Popup.popupWindow = window.open(url, windowName, stringifiedOptions);\n\n    window.popup = Popup.popupWindow;\n\n    if (Popup.popupWindow && Popup.popupWindow.focus) {\n      Popup.popupWindow.focus();\n    }\n\n    return Popup;\n  };\n\n  Popup.eventListener = function (redirectUri) {\n    var p1 = new Promise(function (resolve, reject) {\n      Popup.popupWindow.addEventListener('loadstart', function (event) {\n        if (event.url.indexOf(redirectUri) !== 0) {\n          return;\n        }\n\n        var parser = document.createElement('a');\n        parser.href = event.url;\n\n        if (parser.search || parser.hash) {\n          var queryParams = parser.search.substring(1).replace(/\\/$/, '');\n          var hashParams = parser.hash.substring(1).replace(/\\/$/, '');\n          var hash = utils.parseQueryString(hashParams);\n          var qs = utils.parseQueryString(queryParams);\n\n          extend(qs, hash);\n\n          if (!qs.error) {\n            resolve(qs);\n          }\n\n          Popup.popupWindow.close();\n        }\n      });\n\n      Popup.popupWindow.addEventListener('loaderror', function () {\n        reject('Authorization Failed');\n      });\n    });\n\n    return p1;\n  };\n\n  Popup.pollPopup = function (redirectUri) {\n\n    var promise = new Promise(function (resolve, reject) {\n\n      var redirectUriParser = document.createElement('a');\n      redirectUriParser.href = redirectUri;\n\n      var redirectUriPath = utils.getFullUrlPath(redirectUriParser);\n\n      var polling = setInterval(function () {\n        if (!Popup.popupWindow || Popup.popupWindow.closed || Popup.popupWindow.closed === undefined) {\n          reject('The popup window was closed.');\n          clearInterval(polling);\n        }\n\n        try {\n          var popupWindowPath = utils.getFullUrlPath(Popup.popupWindow.location);\n\n          // Redirect has occurred.\n          if (popupWindowPath === redirectUriPath) {\n            // Contains query/hash parameters as expected.\n            if (Popup.popupWindow.location.search || Popup.popupWindow.location.hash) {\n              var queryParams = Popup.popupWindow.location.search.substring(1).replace(/\\/$/, '');\n              var hashParams = Popup.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\n              var hash = utils.parseQueryString(hashParams);\n              var qs = utils.parseQueryString(queryParams);\n\n              extend(qs, hash);\n\n              if (qs.error) {\n                reject(qs);\n              } else {\n                resolve(qs);\n              }\n            } else {\n              // Does not contain query/hash parameters, can't do anything at this point.\n              reject('Redirect has occurred but no query or hash parameters were found. ' + 'They were either not set during the redirect, or were removed before Satellizer ' + 'could read them, e.g. AngularJS routing mechanism.');\n            }\n\n            clearInterval(polling);\n            Popup.popupWindow.close();\n          }\n        } catch (error) {\n          // Ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\n          // A hack to get around same-origin security policy errors in IE.\n        }\n      }, 20);\n    });\n\n    return promise;\n  };\n\n  Popup.prepareOptions = function (options) {\n    options = options || {};\n    var width = options.width || 500;\n    var height = options.height || 500;\n\n    return extend({\n      width: width,\n      height: height,\n      left: window.screenX + (window.outerWidth - width) / 2,\n      top: window.screenY + (window.outerHeight - height) / 2.5\n    }, options);\n  };\n\n  Popup.stringifyOptions = function (options) {\n    var parts = [];\n    forEach(options, function (value, key) {\n      parts.push(key + '=' + value);\n    });\n    return parts.join(',');\n  };\n\n  return Popup;\n}\n\nmodule.exports = Popup();//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3BvcHVwLmpzPzhlYmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8kcSwgJGludGVydmFsLCAkd2luZG93LCBjb25maWcsIHV0aWxzXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xudmFyIGV4dGVuZCA9IHV0aWxzLmV4dGVuZDtcbnZhciBmb3JFYWNoID0gdXRpbHMuZm9yRWFjaDtcblxuZnVuY3Rpb24gUG9wdXAoKXtcblxuICAgIHZhciBQb3B1cCA9IHt9O1xuXG4gICAgUG9wdXAudXJsID0gJyc7XG4gICAgUG9wdXAucG9wdXBXaW5kb3cgPSBudWxsO1xuXG4gICAgUG9wdXAub3BlbiA9IGZ1bmN0aW9uKHVybCwgbmFtZSwgb3B0aW9ucykge1xuICAgICAgUG9wdXAudXJsID0gdXJsO1xuXG4gICAgICB2YXIgc3RyaW5naWZpZWRPcHRpb25zID0gUG9wdXAuc3RyaW5naWZ5T3B0aW9ucyhQb3B1cC5wcmVwYXJlT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICB2YXIgVUEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgICAgIHZhciB3aW5kb3dOYW1lID0gKHdpbmRvdy5jb3Jkb3ZhIHx8IFVBLmluZGV4T2YoJ0NyaU9TJykgPiAtMSkgPyAnX2JsYW5rJyA6IG5hbWU7XG5cbiAgICAgIFBvcHVwLnBvcHVwV2luZG93ID0gd2luZG93Lm9wZW4odXJsLCB3aW5kb3dOYW1lLCBzdHJpbmdpZmllZE9wdGlvbnMpO1xuXG4gICAgICB3aW5kb3cucG9wdXAgPSBQb3B1cC5wb3B1cFdpbmRvdztcblxuICAgICAgaWYgKFBvcHVwLnBvcHVwV2luZG93ICYmIFBvcHVwLnBvcHVwV2luZG93LmZvY3VzKSB7XG4gICAgICAgIFBvcHVwLnBvcHVwV2luZG93LmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQb3B1cDtcbiAgICB9O1xuXG4gICAgUG9wdXAuZXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKHJlZGlyZWN0VXJpKSB7XG4gICAgICB2YXIgcDEgPSBuZXcgUHJvbWlzZShcbiAgICAgICAgICBmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgICAgICAgUG9wdXAucG9wdXBXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZHN0YXJ0JywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgaWYgKGV2ZW50LnVybC5pbmRleE9mKHJlZGlyZWN0VXJpKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBwYXJzZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICAgIHBhcnNlci5ocmVmID0gZXZlbnQudXJsO1xuXG4gICAgICAgICAgICAgIGlmIChwYXJzZXIuc2VhcmNoIHx8IHBhcnNlci5oYXNoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5UGFyYW1zID0gcGFyc2VyLnNlYXJjaC5zdWJzdHJpbmcoMSkucmVwbGFjZSgvXFwvJC8sICcnKTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzaFBhcmFtcyA9IHBhcnNlci5oYXNoLnN1YnN0cmluZygxKS5yZXBsYWNlKC9cXC8kLywgJycpO1xuICAgICAgICAgICAgICAgIHZhciBoYXNoID0gdXRpbHMucGFyc2VRdWVyeVN0cmluZyhoYXNoUGFyYW1zKTtcbiAgICAgICAgICAgICAgICB2YXIgcXMgPSB1dGlscy5wYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5UGFyYW1zKTtcblxuICAgICAgICAgICAgICAgIGV4dGVuZChxcywgaGFzaCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXFzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKHFzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBQb3B1cC5wb3B1cFdpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgUG9wdXAucG9wdXBXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVycm9yJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJlamVjdCgnQXV0aG9yaXphdGlvbiBGYWlsZWQnKTtcbiAgICAgICAgICAgIH0pOyBcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcDE7XG5cbiAgICB9O1xuXG4gICAgUG9wdXAucG9sbFBvcHVwID0gZnVuY3Rpb24ocmVkaXJlY3RVcmkpIHtcbiAgICAgIFxuICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiggcmVzb2x2ZSwgcmVqZWN0KXtcblxuICAgICAgICAgIHZhciByZWRpcmVjdFVyaVBhcnNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICByZWRpcmVjdFVyaVBhcnNlci5ocmVmID0gcmVkaXJlY3RVcmk7XG5cbiAgICAgICAgICB2YXIgcmVkaXJlY3RVcmlQYXRoID0gdXRpbHMuZ2V0RnVsbFVybFBhdGgocmVkaXJlY3RVcmlQYXJzZXIpO1xuXG4gICAgICAgICAgdmFyIHBvbGxpbmcgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghUG9wdXAucG9wdXBXaW5kb3cgfHwgUG9wdXAucG9wdXBXaW5kb3cuY2xvc2VkIHx8IFBvcHVwLnBvcHVwV2luZG93LmNsb3NlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJlamVjdCgnVGhlIHBvcHVwIHdpbmRvdyB3YXMgY2xvc2VkLicpO1xuICAgICAgICAgICAgICBjbGVhckludGVydmFsKHBvbGxpbmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgcG9wdXBXaW5kb3dQYXRoID0gdXRpbHMuZ2V0RnVsbFVybFBhdGgoUG9wdXAucG9wdXBXaW5kb3cubG9jYXRpb24pO1xuXG4gICAgICAgICAgICAgIC8vIFJlZGlyZWN0IGhhcyBvY2N1cnJlZC5cbiAgICAgICAgICAgICAgaWYgKHBvcHVwV2luZG93UGF0aCA9PT0gcmVkaXJlY3RVcmlQYXRoKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29udGFpbnMgcXVlcnkvaGFzaCBwYXJhbWV0ZXJzIGFzIGV4cGVjdGVkLlxuICAgICAgICAgICAgICAgIGlmIChQb3B1cC5wb3B1cFdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggfHwgUG9wdXAucG9wdXBXaW5kb3cubG9jYXRpb24uaGFzaCkge1xuICAgICAgICAgICAgICAgICAgdmFyIHF1ZXJ5UGFyYW1zID0gUG9wdXAucG9wdXBXaW5kb3cubG9jYXRpb24uc2VhcmNoLnN1YnN0cmluZygxKS5yZXBsYWNlKC9cXC8kLywgJycpO1xuICAgICAgICAgICAgICAgICAgdmFyIGhhc2hQYXJhbXMgPSBQb3B1cC5wb3B1cFdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKS5yZXBsYWNlKC9bXFwvJF0vLCAnJyk7XG4gICAgICAgICAgICAgICAgICB2YXIgaGFzaCA9IHV0aWxzLnBhcnNlUXVlcnlTdHJpbmcoaGFzaFBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICB2YXIgcXMgPSB1dGlscy5wYXJzZVF1ZXJ5U3RyaW5nKHF1ZXJ5UGFyYW1zKTtcblxuICAgICAgICAgICAgICAgICAgZXh0ZW5kKHFzLCBoYXNoKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKHFzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChxcyk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHFzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gRG9lcyBub3QgY29udGFpbiBxdWVyeS9oYXNoIHBhcmFtZXRlcnMsIGNhbid0IGRvIGFueXRoaW5nIGF0IHRoaXMgcG9pbnQuXG4gICAgICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgICAgICdSZWRpcmVjdCBoYXMgb2NjdXJyZWQgYnV0IG5vIHF1ZXJ5IG9yIGhhc2ggcGFyYW1ldGVycyB3ZXJlIGZvdW5kLiAnICtcbiAgICAgICAgICAgICAgICAgICAgJ1RoZXkgd2VyZSBlaXRoZXIgbm90IHNldCBkdXJpbmcgdGhlIHJlZGlyZWN0LCBvciB3ZXJlIHJlbW92ZWQgYmVmb3JlIFNhdGVsbGl6ZXIgJyArXG4gICAgICAgICAgICAgICAgICAgICdjb3VsZCByZWFkIHRoZW0sIGUuZy4gQW5ndWxhckpTIHJvdXRpbmcgbWVjaGFuaXNtLidcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChwb2xsaW5nKTtcbiAgICAgICAgICAgICAgICBQb3B1cC5wb3B1cFdpbmRvdy5jbG9zZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAvLyBJZ25vcmUgRE9NRXhjZXB0aW9uOiBCbG9ja2VkIGEgZnJhbWUgd2l0aCBvcmlnaW4gZnJvbSBhY2Nlc3NpbmcgYSBjcm9zcy1vcmlnaW4gZnJhbWUuXG4gICAgICAgICAgICAgIC8vIEEgaGFjayB0byBnZXQgYXJvdW5kIHNhbWUtb3JpZ2luIHNlY3VyaXR5IHBvbGljeSBlcnJvcnMgaW4gSUUuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgMjApO1xuXG5cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgUG9wdXAucHJlcGFyZU9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgNTAwO1xuICAgICAgdmFyIGhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0IHx8IDUwMDtcblxuICAgICAgcmV0dXJuIGV4dGVuZCh7XG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIGxlZnQ6IHdpbmRvdy5zY3JlZW5YICsgKCh3aW5kb3cub3V0ZXJXaWR0aCAtIHdpZHRoKSAvIDIpLFxuICAgICAgICB0b3A6IHdpbmRvdy5zY3JlZW5ZICsgKCh3aW5kb3cub3V0ZXJIZWlnaHQgLSBoZWlnaHQpIC8gMi41KVxuICAgICAgfSwgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIFBvcHVwLnN0cmluZ2lmeU9wdGlvbnMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgIGZvckVhY2gob3B0aW9ucywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICBwYXJ0cy5wdXNoKGtleSArICc9JyArIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJywnKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFBvcHVwO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gUG9wdXAoKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvcG9wdXAuanNcbiAqKi8iXSwibWFwcGluZ3MiOiI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }

})