webpackHotUpdate(0,{

/***/ 25:
/***/ function(module, exports, __webpack_require__) {

	eval("//$q, $interval, $window, config, utils\n\nvar utils = __webpack_require__(18);\nvar extend = utils.extend;\nvar forEach = utils.forEach;\n\nfunction Popup() {\n\n  var Popup = {};\n\n  Popup.url = '';\n  Popup.popupWindow = null;\n\n  Popup.open = function (url, name, options) {\n    Popup.url = url;\n\n    var stringifiedOptions = Popup.stringifyOptions(Popup.prepareOptions(options));\n    var UA = $window.navigator.userAgent;\n    var windowName = window.cordova || UA.indexOf('CriOS') > -1 ? '_blank' : name;\n\n    Popup.popupWindow = window.open(url, windowName, stringifiedOptions);\n\n    $window.popup = Popup.popupWindow;\n\n    if (Popup.popupWindow && Popup.popupWindow.focus) {\n      Popup.popupWindow.focus();\n    }\n\n    return Popup;\n  };\n\n  Popup.eventListener = function (redirectUri) {\n    var p1 = new Promise(function (resolve, reject) {\n      Popup.popupWindow.addEventListener('loadstart', function (event) {\n        if (event.url.indexOf(redirectUri) !== 0) {\n          return;\n        }\n\n        var parser = document.createElement('a');\n        parser.href = event.url;\n\n        if (parser.search || parser.hash) {\n          var queryParams = parser.search.substring(1).replace(/\\/$/, '');\n          var hashParams = parser.hash.substring(1).replace(/\\/$/, '');\n          var hash = utils.parseQueryString(hashParams);\n          var qs = utils.parseQueryString(queryParams);\n\n          extend(qs, hash);\n\n          if (!qs.error) {\n            resolve(qs);\n          }\n\n          Popup.popupWindow.close();\n        }\n      });\n\n      Popup.popupWindow.addEventListener('loaderror', function () {\n        reject('Authorization Failed');\n      });\n    });\n\n    return p1;\n  };\n\n  Popup.pollPopup = function (redirectUri) {\n\n    var promise = new Promise(function (resolve, reject) {\n\n      var redirectUriParser = document.createElement('a');\n      redirectUriParser.href = redirectUri;\n\n      var redirectUriPath = utils.getFullUrlPath(redirectUriParser);\n\n      var polling = setInterval(function () {\n        if (!Popup.popupWindow || Popup.popupWindow.closed || Popup.popupWindow.closed === undefined) {\n          reject('The popup window was closed.');\n          clearInterval(polling);\n        }\n\n        try {\n          var popupWindowPath = utils.getFullUrlPath(Popup.popupWindow.location);\n\n          // Redirect has occurred.\n          if (popupWindowPath === redirectUriPath) {\n            // Contains query/hash parameters as expected.\n            if (Popup.popupWindow.location.search || Popup.popupWindow.location.hash) {\n              var queryParams = Popup.popupWindow.location.search.substring(1).replace(/\\/$/, '');\n              var hashParams = Popup.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\n              var hash = utils.parseQueryString(hashParams);\n              var qs = utils.parseQueryString(queryParams);\n\n              extend(qs, hash);\n\n              if (qs.error) {\n                reject(qs);\n              } else {\n                resolve(qs);\n              }\n            } else {\n              // Does not contain query/hash parameters, can't do anything at this point.\n              reject('Redirect has occurred but no query or hash parameters were found. ' + 'They were either not set during the redirect, or were removed before Satellizer ' + 'could read them, e.g. AngularJS routing mechanism.');\n            }\n\n            clearInterval(polling);\n            Popup.popupWindow.close();\n          }\n        } catch (error) {\n          // Ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\n          // A hack to get around same-origin security policy errors in IE.\n        }\n      }, 20);\n    });\n\n    return promise;\n  };\n\n  Popup.prepareOptions = function (options) {\n    options = options || {};\n    var width = options.width || 500;\n    var height = options.height || 500;\n\n    return extend({\n      width: width,\n      height: height,\n      left: window.screenX + (window.outerWidth - width) / 2,\n      top: window.screenY + (window.outerHeight - height) / 2.5\n    }, options);\n  };\n\n  Popup.stringifyOptions = function (options) {\n    var parts = [];\n    forEach(options, function (value, key) {\n      parts.push(key + '=' + value);\n    });\n    return parts.join(',');\n  };\n\n  return Popup;\n}\n\nmodule.exports = Popup();//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vc3JjL3BvcHVwLmpzPzhlYmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8kcSwgJGludGVydmFsLCAkd2luZG93LCBjb25maWcsIHV0aWxzXG5cbnZhciB1dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzLmpzXCIpO1xudmFyIGV4dGVuZCA9IHV0aWxzLmV4dGVuZDtcbnZhciBmb3JFYWNoID0gdXRpbHMuZm9yRWFjaDtcblxuZnVuY3Rpb24gUG9wdXAoKXtcblxuICAgIHZhciBQb3B1cCA9IHt9O1xuXG4gICAgUG9wdXAudXJsID0gJyc7XG4gICAgUG9wdXAucG9wdXBXaW5kb3cgPSBudWxsO1xuXG4gICAgUG9wdXAub3BlbiA9IGZ1bmN0aW9uKHVybCwgbmFtZSwgb3B0aW9ucykge1xuICAgICAgUG9wdXAudXJsID0gdXJsO1xuXG4gICAgICB2YXIgc3RyaW5naWZpZWRPcHRpb25zID0gUG9wdXAuc3RyaW5naWZ5T3B0aW9ucyhQb3B1cC5wcmVwYXJlT3B0aW9ucyhvcHRpb25zKSk7XG4gICAgICB2YXIgVUEgPSAkd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgICB2YXIgd2luZG93TmFtZSA9ICh3aW5kb3cuY29yZG92YSB8fCBVQS5pbmRleE9mKCdDcmlPUycpID4gLTEpID8gJ19ibGFuaycgOiBuYW1lO1xuXG4gICAgICBQb3B1cC5wb3B1cFdpbmRvdyA9IHdpbmRvdy5vcGVuKHVybCwgd2luZG93TmFtZSwgc3RyaW5naWZpZWRPcHRpb25zKTtcblxuICAgICAgJHdpbmRvdy5wb3B1cCA9IFBvcHVwLnBvcHVwV2luZG93O1xuXG4gICAgICBpZiAoUG9wdXAucG9wdXBXaW5kb3cgJiYgUG9wdXAucG9wdXBXaW5kb3cuZm9jdXMpIHtcbiAgICAgICAgUG9wdXAucG9wdXBXaW5kb3cuZm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFBvcHVwO1xuICAgIH07XG5cbiAgICBQb3B1cC5ldmVudExpc3RlbmVyID0gZnVuY3Rpb24ocmVkaXJlY3RVcmkpIHtcbiAgICAgIHZhciBwMSA9IG5ldyBQcm9taXNlKFxuICAgICAgICAgIGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICAgICAgICBQb3B1cC5wb3B1cFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICBpZiAoZXZlbnQudXJsLmluZGV4T2YocmVkaXJlY3RVcmkpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIHBhcnNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgICAgICAgcGFyc2VyLmhyZWYgPSBldmVudC51cmw7XG5cbiAgICAgICAgICAgICAgaWYgKHBhcnNlci5zZWFyY2ggfHwgcGFyc2VyLmhhc2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnlQYXJhbXMgPSBwYXJzZXIuc2VhcmNoLnN1YnN0cmluZygxKS5yZXBsYWNlKC9cXC8kLywgJycpO1xuICAgICAgICAgICAgICAgIHZhciBoYXNoUGFyYW1zID0gcGFyc2VyLmhhc2guc3Vic3RyaW5nKDEpLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG4gICAgICAgICAgICAgICAgdmFyIGhhc2ggPSB1dGlscy5wYXJzZVF1ZXJ5U3RyaW5nKGhhc2hQYXJhbXMpO1xuICAgICAgICAgICAgICAgIHZhciBxcyA9IHV0aWxzLnBhcnNlUXVlcnlTdHJpbmcocXVlcnlQYXJhbXMpO1xuXG4gICAgICAgICAgICAgICAgZXh0ZW5kKHFzLCBoYXNoKTtcblxuICAgICAgICAgICAgICAgIGlmICghcXMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIHJlc29sdmUocXMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIFBvcHVwLnBvcHVwV2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBQb3B1cC5wb3B1cFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkZXJyb3InLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KCdBdXRob3JpemF0aW9uIEZhaWxlZCcpO1xuICAgICAgICAgICAgfSk7IFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBwMTtcblxuICAgIH07XG5cbiAgICBQb3B1cC5wb2xsUG9wdXAgPSBmdW5jdGlvbihyZWRpcmVjdFVyaSkge1xuICAgICAgXG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKCByZXNvbHZlLCByZWplY3Qpe1xuXG4gICAgICAgICAgdmFyIHJlZGlyZWN0VXJpUGFyc2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgICAgIHJlZGlyZWN0VXJpUGFyc2VyLmhyZWYgPSByZWRpcmVjdFVyaTtcblxuICAgICAgICAgIHZhciByZWRpcmVjdFVyaVBhdGggPSB1dGlscy5nZXRGdWxsVXJsUGF0aChyZWRpcmVjdFVyaVBhcnNlcik7XG5cbiAgICAgICAgICB2YXIgcG9sbGluZyA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCFQb3B1cC5wb3B1cFdpbmRvdyB8fCBQb3B1cC5wb3B1cFdpbmRvdy5jbG9zZWQgfHwgUG9wdXAucG9wdXBXaW5kb3cuY2xvc2VkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KCdUaGUgcG9wdXAgd2luZG93IHdhcyBjbG9zZWQuJyk7XG4gICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbGluZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBwb3B1cFdpbmRvd1BhdGggPSB1dGlscy5nZXRGdWxsVXJsUGF0aChQb3B1cC5wb3B1cFdpbmRvdy5sb2NhdGlvbik7XG5cbiAgICAgICAgICAgICAgLy8gUmVkaXJlY3QgaGFzIG9jY3VycmVkLlxuICAgICAgICAgICAgICBpZiAocG9wdXBXaW5kb3dQYXRoID09PSByZWRpcmVjdFVyaVBhdGgpIHtcbiAgICAgICAgICAgICAgICAvLyBDb250YWlucyBxdWVyeS9oYXNoIHBhcmFtZXRlcnMgYXMgZXhwZWN0ZWQuXG4gICAgICAgICAgICAgICAgaWYgKFBvcHVwLnBvcHVwV2luZG93LmxvY2F0aW9uLnNlYXJjaCB8fCBQb3B1cC5wb3B1cFdpbmRvdy5sb2NhdGlvbi5oYXNoKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcXVlcnlQYXJhbXMgPSBQb3B1cC5wb3B1cFdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpLnJlcGxhY2UoL1xcLyQvLCAnJyk7XG4gICAgICAgICAgICAgICAgICB2YXIgaGFzaFBhcmFtcyA9IFBvcHVwLnBvcHVwV2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpLnJlcGxhY2UoL1tcXC8kXS8sICcnKTtcbiAgICAgICAgICAgICAgICAgIHZhciBoYXNoID0gdXRpbHMucGFyc2VRdWVyeVN0cmluZyhoYXNoUGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgIHZhciBxcyA9IHV0aWxzLnBhcnNlUXVlcnlTdHJpbmcocXVlcnlQYXJhbXMpO1xuXG4gICAgICAgICAgICAgICAgICBleHRlbmQocXMsIGhhc2gpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAocXMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHFzKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocXMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBEb2VzIG5vdCBjb250YWluIHF1ZXJ5L2hhc2ggcGFyYW1ldGVycywgY2FuJ3QgZG8gYW55dGhpbmcgYXQgdGhpcyBwb2ludC5cbiAgICAgICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICAgICAgJ1JlZGlyZWN0IGhhcyBvY2N1cnJlZCBidXQgbm8gcXVlcnkgb3IgaGFzaCBwYXJhbWV0ZXJzIHdlcmUgZm91bmQuICcgK1xuICAgICAgICAgICAgICAgICAgICAnVGhleSB3ZXJlIGVpdGhlciBub3Qgc2V0IGR1cmluZyB0aGUgcmVkaXJlY3QsIG9yIHdlcmUgcmVtb3ZlZCBiZWZvcmUgU2F0ZWxsaXplciAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2NvdWxkIHJlYWQgdGhlbSwgZS5nLiBBbmd1bGFySlMgcm91dGluZyBtZWNoYW5pc20uJ1xuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHBvbGxpbmcpO1xuICAgICAgICAgICAgICAgIFBvcHVwLnBvcHVwV2luZG93LmNsb3NlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIC8vIElnbm9yZSBET01FeGNlcHRpb246IEJsb2NrZWQgYSBmcmFtZSB3aXRoIG9yaWdpbiBmcm9tIGFjY2Vzc2luZyBhIGNyb3NzLW9yaWdpbiBmcmFtZS5cbiAgICAgICAgICAgICAgLy8gQSBoYWNrIHRvIGdldCBhcm91bmQgc2FtZS1vcmlnaW4gc2VjdXJpdHkgcG9saWN5IGVycm9ycyBpbiBJRS5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAyMCk7XG5cblxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBQb3B1cC5wcmVwYXJlT3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aCB8fCA1MDA7XG4gICAgICB2YXIgaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgfHwgNTAwO1xuXG4gICAgICByZXR1cm4gZXh0ZW5kKHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgbGVmdDogd2luZG93LnNjcmVlblggKyAoKHdpbmRvdy5vdXRlcldpZHRoIC0gd2lkdGgpIC8gMiksXG4gICAgICAgIHRvcDogd2luZG93LnNjcmVlblkgKyAoKHdpbmRvdy5vdXRlckhlaWdodCAtIGhlaWdodCkgLyAyLjUpXG4gICAgICB9LCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgUG9wdXAuc3RyaW5naWZ5T3B0aW9ucyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgZm9yRWFjaChvcHRpb25zLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHBhcnRzLnB1c2goa2V5ICsgJz0nICsgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcGFydHMuam9pbignLCcpO1xuICAgIH07XG5cbiAgICByZXR1cm4gUG9wdXA7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBQb3B1cCgpO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHNyYy9wb3B1cC5qc1xuICoqLyJdLCJtYXBwaW5ncyI6Ijs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }

})